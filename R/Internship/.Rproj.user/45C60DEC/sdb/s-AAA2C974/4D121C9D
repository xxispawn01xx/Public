{
    "contents" : "rm(list = ls(all = TRUE)); gc()\n\nsource('R_libraries.R')\nload('data/cleaned_data.RData')\n\n\nhead(DT)\nDT[, .N, SensorID]\nDT[, .N, GroupID]\n\n# Compute minimum date we will consider - 7 days going back should be more than enough\nDT[, min_date:=max(date) - (3600 * 24 * 7)]\nDT = DT[date >= min_date]\n\ngc() # clean memory after removing part of the data\n\n### Plotting first one sensor to see how the series look like\n# dt = DT[SensorID == 23216]\n# max_date = max(dt$date)\n# min_date = max_date - 3600 * 24 * 7\n# \n# dt = dt[date > min_date]\n# \n# plot(dt$date, dt$OriginalReading, type='l')\n\n# ggplot(DT[GroupID == 1170], aes(date, OriginalReading, color=SensorID, group=SensorID)) +\n#   geom_line() +\n#   facet_wrap(~SensorID, scales= 'free')\n\n\npdf('time_serie_plots.pdf', width = 12, 8)\nfor(g in unique(DT$GroupID)){\n  p = ggplot(DT[GroupID == g], aes(date, OriginalReading, color=SensorID, group=SensorID)) +\n    geom_line() +\n    facet_wrap(~SensorID, scales= 'free') + \n    theme_few() +\n    labs(title=sprintf('GroupID %s', g))\n  print(p)\n}\ndev.off()\n\n\np = ggplot(DT[GroupID == DT$GroupID[1]], aes(date, OriginalReading, color=SensorID, group=SensorID)) +\n  geom_line() +\n  facet_wrap(~SensorID, scales= 'free') + \n  theme_few() +\n  labs(title=sprintf('GroupID %s', g))\np\n\n\n# DT[SensorID == 23194, .(as.IDate(date))][, .N, V1]\n\n\nsensors_to_try = DT[GroupID == 1170, .N, SensorID]$SensorID\n\n## Change the sensors id from groupID 1170\nsensor_id = sensors_to_try[6]\nsensor_ts = DT[SensorID == sensor_id, c('date', 'OriginalReading'), with=F]\nxts = ts(zoo(sensor_ts$OriginalReading, order.by = sensor_ts$date), frequency=95)\n\nx_stl = stl(xts, s.window = 95)\nplot(x_stl)\nremainder = x_stl$time.series[, 'remainder']\n\n# far outliers\noutlier_condition = ( remainder < (quantile(remainder, 0.25)[[1]] - (3 * IQR(remainder))) ) | (  remainder > quantile(remainder, 0.75)[[1]] + (3 * IQR(remainder)) )\n\n# outliers\noutlier_condition = ( remainder < (quantile(remainder, 0.25)[[1]] - (1.5 * IQR(remainder))) ) | (  remainder > quantile(remainder, 0.75)[[1]] + (1.5 * IQR(remainder)) )\noutlier_condition = ifelse(outlier_condition, 'outlier', 'normal')\n\ntable(outlier_condition)\n\ndf = data.frame(date=sensor_ts$date, remainder=as.numeric(remainder), \n                outlier_condition = as.character(outlier_condition))\n\nggplot(df, aes(date, remainder, color=outlier_condition)) +\n         geom_point() +\n  theme_few()\n\n\nmean()\n\nsd(x_stl$time.series[, 'remainder'])\n\nplot(x_stl)\n\nts(data=sensor_ts$OriginalReading, start=sensor_ts[[1]][[1]], end==sensor_ts[[1]][[nrow(sensor_ts)]])\n\n\n\n\n\n",
    "created" : 1458667072717.000,
    "dirty" : false,
    "encoding" : "LATIN1",
    "folds" : "",
    "hash" : "4179647197",
    "id" : "4D121C9D",
    "lastKnownWriteTime" : 1458675887,
    "path" : "~/Desktop/dm/freelance/03_march/ml_sensor/analysis.R",
    "project_path" : "analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}