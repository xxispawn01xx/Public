cwd()
pwd()
getwd()
??dir()
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/exploratory.R', echo=TRUE)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/exploratory.R', echo=TRUE)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/exploratory.R', echo=TRUE)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r.r', echo=TRUE)
install.packages("plyr")
install.packages("dplyr")
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r.r', echo=TRUE)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r_v2.r', echo=TRUE)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r_v2.r', echo=TRUE)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r_v2.r', echo=TRUE)
??hist
help(hist)
help(ts)
ts1<-ts(data=mydata,class=c('CensorID'))
plot(ts1)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r_0228.r', echo=TRUE)
View(df9)
View(df9)
source('C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data_ingestion_r_0228.r', echo=TRUE)
View(aggdata)
View(aggdata)
list.files
list.files(data)
list.files('data')
load("C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data/all_files.RData")
load("C:/Users/AliDesktop/Desktop/Magic Briefcase/Internship/data/cleaned_data.RData")
??gc()
## Plotting first one sensor to see how the series look like
dt = DT[SensorID == 23216]
max_date = max(dt$date)
min_date = max_date - 3600 * 24 * 7
dt = dt[date > min_date]
plot(dt$date, dt$OriginalReading, type='l')
ggplot(DT[GroupID == 1170], aes(date, OriginalReading, color=SensorID, group=SensorID)) +
geom_line() +
facet_wrap(~SensorID, scales= 'free')
library(ggplot)
library(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
rm(list = ls(all = TRUE)); gc()
source('R_libraries.R')
load('data/cleaned_data.RData')
head(DT) #count
DT[, .N, SensorID]
DT[, .N, GroupID]
# Compute minimum date we will consider - 7 days going back should be more than enough, selecting
#maximum date - 7 days
DT[, min_date:=max(date) - (3600 * 24 * 7)]
DT = DT[date >= min_date] #WHERE in SQL
gc() # garbage collection after removing part of the data
## Plotting first one sensor to see how the series look like
dt = DT[SensorID == 23216]
max_date = max(dt$date)
min_date = max_date - 3600 * 24 * 7
dt = dt[date > min_date]
plot(dt$date, dt$OriginalReading, type='l')
ggplot(DT[GroupID == 1170], aes(date, OriginalReading, color=SensorID, group=SensorID)) +
geom_line() +
facet_wrap(~SensorID, scales= 'free')
install.packages("ggthemes")
sensors_to_try = DT[GroupID == 1170, .N, SensorID]$SensorID
sensor_id = sensors_to_try[6] #Good 23194 has a spike, but doesn't have spike 23174
sensor_ts = DT[SensorID == sensor_id, c('date', 'OriginalReading'), with=F]
head(sensor_ts)
#str(sensor_ts)
str(sensor_ts)
x_stl = stl(xts, s.window = 95)
plot(x_stl)
xts = ts(zoo(sensor_ts$OriginalReading, order.by = sensor_ts$date), frequency=95)
install.packages("zoo")
xts = ts(zoo(sensor_ts$OriginalReading, order.by = sensor_ts$date), frequency=95)
xts = ts(zoo(sensor_ts$OriginalReading, order.by = sensor_ts$date), frequency=95)
library(zoo)
xts = ts(zoo(sensor_ts$OriginalReading, order.by = sensor_ts$date), frequency=95)
x_stl = stl(xts, s.window = 95)
plot(x_stl)
remainder = x_stl$time.series[, 'remainder']
table(outlier_condition)
x_stl = stl(xts, s.window = 95)
plot(x_stl)
remainder = x_stl$time.series[, 'remainder']
# far outliers #proportion of distribution, more robust
outlier_condition = ( remainder < (quantile(remainder, 0.25)[[1]] - (3 * IQR(remainder))) ) | (  remainder > quantile(remainder, 0.75)[[1]] + (3 * IQR(remainder)) )
# outliers
outlier_condition = ( remainder < (quantile(remainder, 0.25)[[1]] - (1.5 * IQR(remainder))) ) | (  remainder > quantile(remainder, 0.75)[[1]] + (1.5 * IQR(remainder)) )
outlier_condition = ifelse(outlier_condition, 'outlier', 'normal')
table(outlier_condition)
df = data.frame(date=sensor_ts$date, remainder=as.numeric(remainder),
outlier_condition = as.character(outlier_condition))
ggplot(df, aes(date, remainder, color=outlier_condition)) +
geom_point() +
theme_few()
x_stl = stl(xts, s.window = 95)
plot(x_stl)
remainder = x_stl$time.series[, 'remainder']
# far outliers #proportion of distribution, more robust
outlier_condition = ( remainder < (quantile(remainder, 0.25)[[1]] - (3 * IQR(remainder))) ) | (  remainder > quantile(remainder, 0.75)[[1]] + (3 * IQR(remainder)) )
# outliers
outlier_condition = ( remainder < (quantile(remainder, 0.25)[[1]] - (1.5 * IQR(remainder))) ) | (  remainder > quantile(remainder, 0.75)[[1]] + (1.5 * IQR(remainder)) )
outlier_condition = ifelse(outlier_condition, 'outlier', 'normal')
table(outlier_condition)
df = data.frame(date=sensor_ts$date, remainder=as.numeric(remainder),
outlier_condition = as.character(outlier_condition))
ggplot(df, aes(date, remainder, color=outlier_condition)) +
geom_point() +
theme_bw()
mean()
sd(x_stl$time.series[, 'remainder'])
plot(x_stl)
ts(data=sensor_ts$OriginalReading, start=sensor_ts[[1]][[1]], end==sensor_ts[[1]][[nrow(sensor_ts)]])
ggplot(df, aes(date, remainder, color=outlier_condition)) +
geom_point() +
theme_bw()
