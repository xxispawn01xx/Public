a <- available.packages()
head(a, 3)
install.packages("slidify")
install.packages("ggplot2", "devtools")
install.packages(c("ggplot2", "devtools"))
library(ggplot2)
ggplot
search()
install.packages("KernSmooth")
search()
load(KernSmooth)
library(KernSmooth)
integer
integer(10)
subject_name <- ("john doe", "jane doe", "steve")
subject_name <- c("john doe", "jane doe", "steve")
blood <= factor(c("O", "AB", "A"), levels=c("A", "B", "AB", "O"))
blood <- factor(c("O", "AB", "A"), levels=c("A", "B", "AB", "O"))
blood
subject2 <- list(fullname=subject_name[1],temperature="98.6", flu_status=FALSE,gender="MALE", blood="O")
subject2
subject2[2]
subject2$temperature
“subject1[c("temperature", "flu_status")]”
Excerpt From: “Machine Learning with R [eBook].epub.” iBooks. https://itunes.apple.com/WebObjects/MZStore.woa/wa/viewBook?id=2F6DECA6DC4DFE4B7B74A1DABCC171C2
subject2[c("temperature", "flu_status")]
gender <- factor(c("MALE", "FEMALE", "MALE"))
temperature <- c(98.1, 98.6, 101.4)
pt_data <- data.frame(subject_name, temperature, flu_status, gender, blood, stringsAsFactors=FALSE)
flu_status <- c(FALSE, FALSE, TRUE)
pt_data <- data.frame(subject_name, temperature, flu_status, gender, blood, stringsAsFactors=FALSE)
pt_data
pt_data$subject_name
pt_data$temperature
pt_data[c("temperature", "flu_status")]
pt_data[,1]
pt_data[1,]
m <- matrix(c('a', 'b', 'c', 'd')m nrow=2)
m <- matrix(c('a', 'b', 'c', 'd'), nrow=2)
m
pt_data <- read.csv("pt_data.csv", stringsAsFactors=FALSE)
pt_data <- read.csv("~/Documents/machine-learning-with-r/pt_data.csv", stringsAsFactors=FALSE)
pt_data
pt_data <- read.csv("~/Documents/machine-learning-with-r/pt_data.csv", stringsAsFactors=FALSE)
pt_data
install.packages("RODBC")
library(RODBC)
conn <- odbcConnect("localhost", uid="root", pwd="")
conn <- odbcConnect("mysql", uid="root", pwd="")
usedcars <- read.csv("~/Downloads/2148OS_code/chapter 2/usedcars.csv", stringsAsFactors=FALSE)
usedcars
str(usedcars)
summary(usedcars$year)
summary(usedcars$price)
summary(usedcars[c("price", "mileage")]
)
summary(usedcars[c("price", "mileage")])
quantile(usedcars$price)
boxplot(usedcars$price, main="Boxplot of Cars", ylab="Price ($)")
histogram(usedcars$price, main="Hist of Cars", xlab="Price ($)")
hist(usedcars$price, main="Hist of Cars", xlab="Price ($)")
table(usedcars$year)
table(usedcars$model)
prop.table(table(usedcars$color))
prop.table(table(usedcars$color)) * 100
sort(prop.table(table(usedcars$color)) * 100)
reverse(sort(prop.table(table(usedcars$color)) * 100))
sort(prop.table(table(usedcars$color)) * 100, decreasing=TRUE)
plot(x=usedcars$mileage, y=usedcars$price, main="Plot of Price vs Mileage", xlab="Mileage", ylab="Price")
install.packages("gmodel")
install.packages("gmodels")
library(gmodels)
usedcars$conservative <- usedcars$colors %in% c("Black", "Grey", "Silver", "White")
usedcars$conservative <- usedcars$color %in% c("Black", "Grey", "Silver", "White")
usedcars$conservative
sample(usedcars$conservative)
table(usedcars$conservative)
usedcars$conservative <- usedcars$color %in% c("Black", "Gray", "Silver", "White")
table(usedcars$conservative)
CrossTable(x=usedcars$model, y=usedcars$conservative)
CrossTable(x=usedcars$model, y=usedcars$conservative, chisqr=TRUE)
CrossTable(x=usedcars$model, y=usedcars$conservative, chisq=TRUE)
c(0.5, 0.6)
c(T, F)
9:29
vector(numeric, length = 10)
vector("numeric"", length = 10)
""
vector("numeric", length = 10)
c("A", T)
c("A", T)
c(T, 1)
c(T, 2)
c(F, 2)
class(c(F, 2))
as.c(F, 2)
as.numeric(c(F, 2))
matrix(nrow=1, ncol=2)
matrix(nrow=2, ncol=3)
matrix(1:10, nrow=2, ncol=3)
matrix(1:6, nrow=2, ncol=3)
transform(matrix(1:6, nrow=2, ncol=3))
list(1, "a", T)
list(1, "a", T)[1]
list(1, "a", T)[2]
ff <- factor(substring("statistics", 1:10, 1:10), levels = letters)
ff
table(ff)
unclass(ff)
data.frame(foo=1:4, bar=c(T,T,F,F))
nrow
x <- data.frame(foo=1:4, bar=c(T,T,F,F))
nrow(x)
x <- 4L
class(x)
y <- c(4, TRUE)
class(y)
x6 <- c(1,3, 5)
y6 <- c(3, 2, 10)
rbind(x6, y6)
dim(_)
dim(rbind(x6, y6))
c(1.0, T)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y <- 2:3
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
zip("~/Downloads/rprog_data_quiz1_data.zip")
unzip("~/Downloads/rprog_data_quiz1_data.zip")
z <- unzip("~/Downloads/rprog_data_quiz1_data.zip")
z
csv <- unzip("~/Downloads/rprog_data_quiz1_data.zip")
table.read(csv)
read.csv(csv)
read.csv(csv)[1..2]
read.csv(csv, nrows=2)
read.csv(csv)[-2..-1]
read.csv(csv)[47]
data <- read.csv(csv)
class(data)
d <- read.csv(csv)
d[47]
methds(d)
methods(d)
d[47,]
d$Ozone
is.na(d$Ozone)
is.na[is.na(d$Ozone)]
d$Ozone[is.na(d$Ozone)]
d$Ozone[is.na(d$Ozone)].count
size(d$Ozone[is.na(d$Ozone)])
length(d$Ozone[is.na(d$Ozone)])
mean(d$Ozone[!is.na(d$Ozone)])
z <- d[d$Ozone > 31 && d$Temp > 90]
z
z[1,]
z <- d[d$Ozone > 31]
d
z <- d[d$Ozone > 31]
z <- d[d["Ozone"] > 31]
z
class(d)
d
z <- d[d$Ozone >31]
z <- d[d$Ozone >31, "Ozone"]
z
z <- d[d$Ozone >31, ]
z
non <- is.na[!is.na(d$Ozone)]
n <- is.na[!is.na(d$Ozone)]
x <- is.na[!is.na(d$Ozone)]
x <- d[!is.na(d$Ozone)]
x <- d[!is.na(d$Ozone),]
x
z <- x[x$Ozone >31, ]
z
zz <- z[z$Temp >90, ]
zz
mean(zz$Solar.R)
mean(d[d$Month == 6]$Temp)
mean(d[d$Month == 6,]$Temp)
max(d[d$Month == 5,]$Ozone)
max(x[x$Month == 5,]$Ozone)
d
t <- 4
class(t)
t <- c(4, "a", TRUE)
class(t)
t <- c(1,3, 5)
u <- c(3, 2, 10)
cbind(t, u)
t<- list(2, "a", "b", TRUE)
t[[1]]
t[[2]]
class(t[[2]])
length(t[[2]])
t <- 1:4
u <- 2:3
t+u
class(t+u)
t <- c(3, 5, 1, 10, 12, 6)
t[t %in% 1:5] <- 0
t
x
d
d
f <- function(x, ...) {}
f <- function(x, ...) {
print(x)
print(...)
}
f(2)
f(2, 3)
f(2, 3, 4, 5, 6)
add2(2,3)
add2 <- function(x, y) { x + y }
add2(2,3)
above10 <- function(x) {
use <- x > 10
x[use]
}
above10([1,8,10,34,2])
above10(c(1 8 10 34 2)
above10(c(1 8 10 34 2))
above10(list(1 8 10 34 2))
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n=10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means <- mean(y[i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA=T) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means <- mean(y[i], na.rm=removeNA)
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA=T) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means <- mean(y[, i], na.rm=removeNA)
}
means
}
columnmean(airquality)
airquality
columnmean <- function(y, removeNA=T) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm=removeNA)
}
means
}
columnmean(airquality)
as.Date("2012-03-04")
unclass(as.Date("2012-03-04"))
x <- Sys.time()
x
as.POSIXlt(x)
p <- as.POSIXlt(x)
unclass(p)
names(unclass(p))
p$sec
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
setwd("~/Documents/machine-learning-with-r/3 - Lazy Nearest Neighbors")
str(wbcd)
source('~/.active-rstudio-document')
?read.csv
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
table(wbcd$diagnosis)
source('~/.active-rstudio-document')
table(wbcd$diagnosis)
round(prop.table(wbcd$diagnosis) * 100, digits=1)
round(prop.table(table(wbcd$diagnosis)) * 100, digits=1)
?prop.table
View(wbcd)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
source('~/.active-rstudio-document')
normalize(1:5)
?step
normalize(seq(10, by=10))
seq(10, by=.10)
seq(10, 50, by=.10)
seq(10, 50, by=10)
normalize(seq(10, 50, by=10))
source('~/.active-rstudio-document')
View(wbcd_n)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
summary(wbcd_n[c("radius_mean", "area_mean", "smoothness_mean")])
wbcd_n$area_mean
summary(wbcd_n$area_mean)
wbcd[1]
as.data.frame(wbcd)[1,]
source('~/.active-rstudio-document')
packages.install("class")
install.packages("class")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("gmodels")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
summary(wbcd_z$area_mean)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
