{
    "contents" : "rm(list = ls(all = TRUE)); gc()\n\nsource('R_libraries.R')\nsource('functions/functions.R')\nlibrary(tsoutliers)\n\nDT = read_data('data.csv')\n\n# epex spot n15\tintraday epex n15\tprice delta 1\tepex spot h\tintraday mk02 h\t\n# price delta 2\ttemp actual\ttemp normal\tdelta temp\n\nDT = DT[, .(Netzregelverbund_RZ_SALDO_betr_mw, \n            epex_spot_n15, intraday_epex_n15, epex_spot_h, intraday_mk02_h, delta_temp, \n            time_stamp)]\n\niters = 1:7\nwindow_length = 96 * 7\nstart = 1\nh = 96\n\ni = 1\nif(i == 1){\n  window = 1:window_length\n  step = 96\n}\n\ninx_train = window + step\ninx_test = (max(inx_train)+1):(max(inx_train)+1+ (96*30))\n\ntrain = DT[inx_train]\ntest = DT[inx_test]\n\nfml = as.formula(\"~ epex_spot_n15 + intraday_epex_n15 + epex_spot_h + intraday_mk02_h + delta_temp\")\nXreg_train = model.matrix(fml, data=train)[,-1]\nXreg_test = model.matrix(fml, data=test)[,-1]\n\n# Xreg_train = model.matrix(~ price_delta_1 + price_delta_2 + delta_temp, data=train)[,-1]\n# Xreg_test = model.matrix(~ price_delta_1 + price_delta_2 + delta_temp, data=test)[,-1]\n\nx_train = ts(zoo(train$Netzregelverbund_RZ_SALDO_betr_mw, \n                 order.by = train$time_stamp), frequency = 96)\n\ny_test = test$Netzregelverbund_RZ_SALDO_betr_mw\nh = length(y_test)\n\n# estationarity\nBox.test(diff(x_train, 96), lag=20, type='Ljung-Box')\nBox.test(x_train, type='Ljung-Box')\nadf.test(x_train)\nkpss.test(x_train)\n\ndata_deseason <- stl(x_train, t.window=7, s.window=96, robust=TRUE,\n                     l.degree = 1, s.degree=1, l.window=96,\n                     s.jump = 1, t.jump=1, l.jump=1) \nplot(data_deseason)\n\n# iO <- which(data_deseason$weights < 1e-8)\nremainder <- data_deseason$time.series[, 'remainder']\n# remainder <- tso(remainder)\n# plot(remainder)\n\n# med = median(remainder)\nsdev = sd(remainder)\nlim_inf = - 2 * sdev\nlim_sup = 2 * sdev\n\nremainder = ifelse(remainder > lim_sup, lim_sup, \n                   ifelse(remainder < lim_inf, lim_inf, remainder))\ndata_deseason$time.series[, 'remainder'] <- remainder\n\nf1 <- forecast(data_deseason, method='arima', h = length(y_test), \n               xreg=Xreg_train, newxreg = Xreg_test)\n\nf2 <- forecast(data_deseason, h=length(y_test),\n               forecastfunction=function(x,h,level){\n                 fit <- Arima(x, order=c(0,0,1), include.mean=FALSE, xreg=Xreg_train)\n                 return(forecast(fit,h=length(y_test),level=level, xreg=Xreg_test))\n               })\n\n# f3 <- forecast(data_deseason, method='arima', h = length(y_test))\n# \n# f4 <- forecast(data_deseason, h=length(y_test),\n#                forecastfunction=function(x,h,level){\n#                  fit <- Arima(x, order=c(2,0,0), include.mean=FALSE)\n#                  return(forecast(fit,h=length(y_test),level=level))\n#                })\n\nf1$model\nf2$model\n\nplot(f1)\nplot(f2)\n\nfcast = cbind(f1$mean, f2$mean)\n\nmae_fcast = apply(fcast, 2, function(j) mean(abs(y_test - j)))\nprint(mae_fcast)\n\ndxts = xts(x=data.frame(y_test, fcast), order.by = test$time_stamp)\ndygraph(dxts) %>% dyRangeSelector()\n\n\npred = data.frame(y_test, fcast)\nwrite.table(pred, file='arima_remainder.csv')\n\n# x_train_tso <- tso(x_train)\n# plot(x_train_tso)\n\ntsdecomp = stl(x_train, s.window = 96)\nplot(tsdecomp)\n\nremainder = tsdecomp$time.series[, 'remainder']\n\n\nfit_remainder = auto.arima(remainder, stepwise=TRUE, \n                           approximation=TRUE,\n                           trace=TRUE)\nfc_remainder = forecast(fit_remainder, h=h)$mean\nplot(fc_remainder)\n\nloess_fit <- loess(as.numeric(x_train) ~ as.numeric(index(x_train)), span=0.01)\nsmoothed <- (predict(loess_fit, as.numeric(index(x_train))))\nplot(smoothed, type='l')\n\ndxts = xts(x=data.frame(x_train, smoothed), order.by = train$time_stamp)\ndygraph(dxts) %>% dyRangeSelector()\n\nx_train = ts(zoo(smoothed, order.by = train$time_stamp), frequency=96)\n\n\n### Model that includes other predictors\narimax <- auto.arima(x_train, stepwise=TRUE, \n                     approximation=TRUE,\n                     trace=TRUE,  \n                     xreg=Xreg_train)\n\nh = length(y_test)\nfcast <- forecast(arimax, h=h, xreg=Xreg_test)$mean\n\nmae_fcast = mean(abs(y_test - fcast))\nprint(mae_fcast)\n\nfcast = as.data.frame(cbind(fcast, y_test))\nnames(fcast) <- c('ARIMAX_smoothed', 'TestSerie')\n\n# Plots the forecasts and the next month time serie\ndxts = xts(x=fcast, order.by = test$time_stamp)\n\ndygraph(dxts) %>%\n  dyRangeSelector()\n\nwrite.table(fcast, file='predictions_smoothed.txt')\n\n\n\n\n",
    "created" : 1458668547946.000,
    "dirty" : false,
    "encoding" : "LATIN1",
    "folds" : "",
    "hash" : "1669138146",
    "id" : "41F40D",
    "lastKnownWriteTime" : 1457280139,
    "path" : "~/Desktop/dm/freelance/02_february/electricity_time_series/stl_arima_remainder.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "type" : "r_source"
}